#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 10
#define MAX_TASK_LENGTH 50

struct Task {
    char description[MAX_TASK_LENGTH];
    int priority;
    int completed;
};

// Login function
int login() {
    char username[20];
    char password[20];

    printf("Enter username: ");
    scanf("%s", username);
    printf("Enter password: ");
    scanf("%s", password);

    // Basic validation, replace it with your actual authentication mechanism
    if (strcmp(username, "rahat") == 0 && strcmp(password, "rahat") == 0) {
        printf("Login successful! Welcome %s!!\n",username);
        return 1; // Return 1 for successful login
    } else {
        printf("Login failed. Please try again.\n");
        return 0; // Return 0 for failed login
    }
}

// Logout function
void logout() {
    printf("Logged out successfully.\n");
}

// Add Task function
void addTask(struct Task tasks[], int *numTasks) {
    // Implementation remains the same
}

// Delete Task function
void deleteTask(struct Task tasks[], int *numTasks) {
    // Implementation remains the same
}

// Display Tasks function
void displayTasks(struct Task tasks[], int numTasks) {
    // Implementation remains the same
}

// Compare Tasks function
int compareTasks(const void *task1, const void *task2) {
    // Implementation remains the same
}

int main() {
    struct Task tasks[MAX_TASKS];
    int numTasks = 0;
    char choice;
    
    printf("Welcome to Daily Task Planner\n");

    // Login
    if (!login()) {
        return 0; // Exit if login fails
    }

    do {
        printf("\nMenu:\n");
        printf("1. Add Task\n");
        printf("2. Delete Task\n");
        printf("3. Display Tasks\n");
        printf("4. Logout\n");
        printf("Enter your choice: ");
        scanf(" %c", &choice);
        getchar();

        switch (choice) {
            case '1':
                addTask(tasks, &numTasks);
                break;
            case '2':
                deleteTask(tasks, &numTasks);
                break;
            case '3':
                qsort(tasks, numTasks, sizeof(struct Task), compareTasks);
                displayTasks(tasks, numTasks);
                break;
            case '4':
                logout();
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != '4');

    return 0;
}
